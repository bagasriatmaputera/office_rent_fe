1. Buat project react dan gunakan typescript + SWT denganvite
2. Setelah jadi instal npm dengan = npm i ,kemudian npm run denganvite
3. Buat folder pages, wrappers, components, types
4. Instal react-router-dom dengan npm instal react-router-dom
5. Buat BrowseRoute di app dan buat Routes, Route nya juga
    return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Browse />} />
        <Route path="/city/:slug" element={<CityDetails />} />
        <Route path="/office/:slug" element={<OfficeDetails />} />
        <Route path="/office/:slug/book" element={<BookOffice />} />
        <Route path="/success-booking" element={<SuccessBooking />} />
        <Route path="/check-booking" element={<CheckBooking />} />
      </Routes>
    </BrowserRouter>
  )
6. Buat Page sesuai elelmt diatas
7. Copy template untuk browse kemudai instal swiper
    npm instal swiper
8. Buat card juga wrapper masing masing section sesuai kebutuhan
9. instal axios
10. Buat types.ts unutk mengatur type data typescript
11. Jika sudah ambil data dengan axios pada wrapper dan kemudian ambil hasil dicomponents
12. Lakukan untuk OfficeCard dan CitiesCard
13. Untuk Badge gunakan data boolean dan lakukan logika if
  {office.is_open === true ? 'Closed' : 'Open'}
14. Buat Page CityDetails dan gunakan useParams untuk ambil router
    const { slug } = useParams<{ slug: string }>();
15. Guanaka UseEffect untuk ambil data sesuai slug
    useEffect(() => {
        axios.get(`http://localhost/officeRentWebBE/public/api/city/${slug}`, {
            headers: {
                'x-api-key': 'qwe23asd456#fsd$'
            }
        }).then((response) => {
            setLoading(false)
            setCity(response.data.data)
        }).catch((error) => {
            setError(error.message && 'Error fetch data')
        })
    }, [slug])

16. Implementasikan data ke CityDetails kemudian perhatikan types harus sesuai nama column pada database
17. Pada bagian maping office photo PERHATIKAN!!! yang di mapping itu child dari interface office

      {office?.photo.map((photos) => (
          <SwiperSlide key={photos.id} className="swiper-slide !w-fit">
              <div className="w-[700px] h-[550px] overflow-hidden">
                  <img
                      src={`${baseUrl}/${photos.photo}`}
                      className="w-full h-full object-cover"
                      alt="thumbnail"
                  />
              </div>
          </SwiperSlide>
      ))}

18. Buat component navbar agar mengurangi perulanagan code
19. Pada BookOffice buat variable yang dibutuh kan, ada beberapa yang baru saya pahami sperti
      useNavigate() = untuk menredirect otomatis ketikan sudah success transsaction
      formData menggunakan useState =  untuk menampung input pengguna
      const { slug } = useParams<{ slug: string }>();
      const [office, setOffice] = useState<Office | null>();
      const [loading, setLoading] = useState(true);
      const [error, setError] = useState<string | null>(null);
      const navigate = useNavigate();

      const [ formData, setFormData ] = useState({
          name:   '',
          phone_number: '',
          started_at: '',
          office_space_id: '',
          totalAmountWithUniqueCode: ''
      })
20. untuk validasi form gunakan zod, npm instal zod
21. tambahkan juga variable untuk totalAmountWithUniqueCode, UniqueCode
    const [ uniqueCode, setUniqueCode ] = useState<number>(0)
    const [ totalAmountWithUniqueCode, setTotalAmountWithUniqueCode ] = useState<number>(0)
22. buat UseEffect dengan slug dan pada then buat variable generateUniqueCode = Math.floor(100 + Math.random() * 900)
    dan totalPrice 
    const generateUniqueNumber = Math.floor(100 + Math.random() * 900);
    const totalPrice = response.data.data.price - generateUniqueNumber;
23. Modifikasi form dengan attribut value,dan name sesuai variable formData
24. Buat handleChanged untuk mengatasi perubahan input
    const handleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {
        setFormData({
            ...formData,
            [e.target.name] : e.target.value
        });
    };

25. Tambahakan handleSubmit dengan async dan lakukan try and catch
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!validationForm()) return;

        setIsLoading(true);
        setError(null); // Clear previous errors

        try {
            const response = await axios.post(`http://localhost/officeRentWebBE/public/api/booking-transaction`, {
                ...formData
            }, {
                headers: {
                    'x-api-key': 'qwe23asd456#fsd$'
                }
            });
            // Navigate on successful booking
            navigate('/success-booking', { // Recommended to navigate to a success page
                state: {
                    office,
                    bookingDetails: response.data.data // Corrected key
                }
            });
        } catch (error: unknown) {
            if (axios.isAxiosError(error)) {
                setError(error.response?.data?.message || error.message);
            } else {
                setError("An unexpected error occurred during booking.");
            }
        } finally {
            setIsLoading(false);
        }
    };

26. pada navigate dalam handleSubmint pastikan mengirim state office dan booking: response.data.data
    navigate('/success-booking', { // Recommended to navigate to a success page
                state: {
                    office,
                    bookingDetails: response.data.data // Corrected key
                }
            });

    *pastikan pada backend controller store me-return json agar navigate bookingDetails berhasil

27. Beri link pada tombol View Booking Details dan buat pagenya 

28. Copas template lalu sesuaikan , hapus html for dll

29. buat form kemudian post api be, jangan lupa disable button

30. pada SuccessBook gunakan data yang dikirim dari page sebelumnya untuk nama , photo, ID transaction

31. pada button link ke ViewBooking, kemudian buat logic post api untuk pencarian booking  
    const [formData, setFormData] = useState({
        booking_trx_id: '',
        phone_number: ''
    });
    
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            const res = await axios.post(`http://localhost/officeRentWebBE/public/api/check-booking-transaction`, {
                ...formData
            }, {
                headers: {
                    'x-api-key': 'qwe23asd456#fsd$'
                }
            });
            // console.log('BookingTransaction:', res.data.data)
            setLoading(true)
            setIsLoading(true)
            setBookingTrasaction(res.data.data)

        } catch (error: unknown) {
            if (axios.isAxiosError(error)) {
                setError(error.response?.data?.message || error.message);
            } else {
                setError("An unexpected error occurred during booking.");
            }
        } finally {
            setIsLoading(false);
            setLoading(false);
        };
    }